//! zinc
    library GUI requires MISC, Main {
    
        constant integer HUMAN_UI = 1;
        constant integer ORC_UI = 2;
        constant integer ELF_UI = 3;
        constant integer UNDEAD_UI = 4;

        GUI_X(x) = (Left_X + x * 64) + 32.
        GUI_Y(y) = (Left_Y + y * 64) + 32.

        constant integer BASE_ID = 'B01S';
        constant integer BACKGROUND_HUMAN_ID = 'B02B';
        constant integer BACKGROUND_ELF_ID = 'B015';
        constant integer BACKGROUND_ORC_ID = 'B016';
        constant integer BACKGROUND_UNDEAD_ID = 'B017';
        constant integer BACKGROUND_BLACK_ID = 'B01T';

        constant integer BORDER_ELF_DOWN = 'B00E';
        constant integer BORDER_ELF_UP = 'B00H';
        constant integer BORDER_ELF_LEFT = 'B00F';
        constant integer BORDER_ELF_RIGHT = 'B00G';
        constant integer BORDER_ELF_DOWN_LEFT = 'B00M';
        constant integer BORDER_ELF_DOWN_RIGHT = 'B00N';
        constant integer BORDER_ELF_UP_LEFT = 'B00O';
        constant integer BORDER_ELF_UP_RIGHT = 'B00P';

        constant integer BORDER_HUMAN_DOWN = 'B02C';
        constant integer BORDER_HUMAN_UP = 'B02H';
        constant integer BORDER_HUMAN_LEFT = 'B02F';
        constant integer BORDER_HUMAN_RIGHT = 'B02G';
        constant integer BORDER_HUMAN_DOWN_LEFT = 'B02D';
        constant integer BORDER_HUMAN_DOWN_RIGHT = 'B02E';
        constant integer BORDER_HUMAN_UP_LEFT = 'B02I';
        constant integer BORDER_HUMAN_UP_RIGHT = 'B02J';

        constant integer BORDER_ORC_DOWN = 'B00A';
        constant integer BORDER_ORC_UP = 'B00D';
        constant integer BORDER_ORC_LEFT = 'B00B';
        constant integer BORDER_ORC_RIGHT = 'B00C';
        constant integer BORDER_ORC_DOWN_LEFT = 'B00Q';
        constant integer BORDER_ORC_DOWN_RIGHT = 'B00R';
        constant integer BORDER_ORC_UP_LEFT = 'B00S';
        constant integer BORDER_ORC_UP_RIGHT = 'B00T';

        constant integer BORDER_UNDEAD_DOWN = 'B006';
        constant integer BORDER_UNDEAD_UP = 'B009';
        constant integer BORDER_UNDEAD_LEFT = 'B007';
        constant integer BORDER_UNDEAD_RIGHT = 'B008';
        constant integer BORDER_UNDEAD_DOWN_LEFT = 'B00U';
        constant integer BORDER_UNDEAD_DOWN_RIGHT = 'B00V';
        constant integer BORDER_UNDEAD_UP_LEFT = 'B00X';
        constant integer BORDER_UNDEAD_UP_RIGHT = 'B00W';

        // globals
        public rect AreaRect;
        fogmodifier Visibility;
        destructable BASE, BACKGROUND;
        destructable UP_RIGHT, UP_LEFT, DOWN_RIGHT, DOWN_LEFT;
        destructable UP[22], DOWN[22], LEFT[10], RIGHT[10], MiscDestructables[300], MiscBackgrounds[125];
        texttag MiscText[100];
        integer DestrCount = 0, TextsCount = 0, BackgroundsCount = 0;
        real Left_X, Left_Y;
        public sound ClickSound, ActivateSound;
        public boolean IsShowed = false;
        timer CameraLockTimer = CT; // TODO где-то затерялся CT
        real BASE_X = - 2368., BASE_Y = 2368.;


        public function ResetCamera() {
            PT(CameraLockTimer); // TODO: где-то затерялся PT
        }

        function CameraProcess() {
            SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 1645., 0.);
            SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 270., 0.);
            SetCameraField(CAMERA_FIELD_ROTATION, 90., 0.);
            PanCameraToTimed(BASE_X - 8., BASE_Y + 15., 0.);
        }

        public function ClearText() {
            while(TextsCount != 0) { 
                DestroyTextTag(MiscText[TextsCount]);
                TextsCount = TextsCount - 1;
            }
        }

        public function ClearWindow() {
            while(DestrCount != 0) {
                RemoveDestructable(MiscDestructables[DestrCount]);
                DestrCount = DestrCount - 1;
            }
            while(TextsCount != 0) {
                DestroyTextTag(MiscText[TextsCount]); 
                TextsCount = TextsCount - 1;
            }
            while(BackgroundsCount != 0) {
                RemoveDestructable(MiscBackgrounds[BackgroundsCount]); 
                BackgroundsCount = BackgroundsCount - 1; 
            }
        }

        public function DestroyInterface() {
            integer c = 22;
            IsShowed = false;
            RemoveDestructable(BASE);
            RemoveDestructable(BACKGROUND);
            FogModifierStop(Visibility);
            PT(CameraLockTimer);
            // UP
            while(c != 0) { 
                RemoveDestructable(UP[c]); 
                c = c - 1; 
            }
            // DOWN
            c = 22;
            while(c != 0) {
                RemoveDestructable(DOWN[c]);
                c = c - 1; 
            }
            // RIGHT
            c = 10;
            while(c != 0) {
                RemoveDestructable(RIGHT[c]); 
                c = c - 1; 
            }
            // LEFT
            c = 10;
            while(c != 0) {
                RemoveDestructable(LEFT[c]);
                c = c - 1; 
            }
            RemoveDestructable(UP_LEFT);
            RemoveDestructable(UP_RIGHT);
            RemoveDestructable(DOWN_LEFT);
            RemoveDestructable(DOWN_RIGHT);
            while(DestrCount != 0) {
                RemoveDestructable(MiscDestructables[DestrCount]);
                DestrCount = DestrCount - 1;
            }
            while(TextsCount != 0) { 
                DestroyTextTag(MiscText[TextsCount]);
                TextsCount = TextsCount - 1;
            }
            while(BackgroundsCount != 0) { 
                RemoveDestructable(MiscBackgrounds[BackgroundsCount]);
                BackgroundsCount = BackgroundsCount - 1;
            }
        }

        public function TurnOnCamera() {
            TimerStart(CameraLockTimer, 0.01, true, function CameraProcess);
        }

        public function AddTextEx(real x, real y, string s, real size) {
            TextsCount ++;
            MiscText[TextsCount] = CreateTextTag();
            SetTextTagText(MiscText[TextsCount], s, (size * 0.023) / 10.);
            SetTextTagPos(MiscText[TextsCount], x, y, 5.);
            //SetTextTagColor(MiscText[TextsCount], PercentToInt(1, 255), PercentToInt(g, 255), PercentToInt(b,255), 0);
        }

        public function AddText(integer cell_x, integer cell_y, string s, real r, real g, real b, real size) {
            real true_x = (Left_X + cell_x * 64) + 32., true_y = (Left_Y + cell_y * 64) + 32.;
            TextsCount = TextsCount + 1;
            MiscText[TextsCount] = CreateTextTag();
            SetTextTagText(MiscText[TextsCount], s, (size * 0.023) / 10.);
            SetTextTagPos(MiscText[TextsCount], true_x, true_y, 5.);
            SetTextTagColor(MiscText[TextsCount], PercentToInt(r, 255), PercentToInt(g, 255), PercentToInt(b, 255), 0);
        }

        public function AddBackground(integer cell_x, integer cell_y) {
            real true_x = (Left_X + cell_x * 64) + 32.;
            real true_y = (Left_Y + cell_y * 64) + 32.;
            BackgroundsCount = BackgroundsCount + 1;
            MiscBackgrounds[BackgroundsCount] = CreateDestructable(BACKGROUND_BLACK_ID, true_x, true_y, 0., 1.1, 0);
        }

        public function CreatePanel(integer cell_x, integer cell_y, integer lenght, integer width, integer variation) {
            integer down_right, down_left, up_right, up_left, up, down, left, right;
            //real start_x = BASE_X + Rx(715.547, -153.435), start_y = BASE_Y + Ry(715.547, -153.435)
            real true_x = (Left_X + cell_x * 64) + 32.;
            real true_y = (Left_Y + cell_y * 64) + 32.;
            integer l, w, c_x, c_y;
            if (lenght == 0 || width == 0) {
                return;
            }

            if (variation == 1 ) {
                down_right = BORDER_HUMAN_DOWN_RIGHT;
                down_left = BORDER_HUMAN_DOWN_LEFT;
                up_right = BORDER_HUMAN_UP_RIGHT;
                up_left = BORDER_HUMAN_UP_LEFT;
                up = BORDER_HUMAN_UP;
                down = BORDER_HUMAN_DOWN;
                left = BORDER_HUMAN_LEFT;
                right = BORDER_HUMAN_RIGHT;
            }
            else if (variation == 2) {
                down_right = BORDER_ORC_DOWN_RIGHT;
                down_left = BORDER_ORC_DOWN_LEFT;
                up_right = BORDER_ORC_UP_RIGHT;
                up_left = BORDER_ORC_UP_LEFT;
                up = BORDER_ORC_UP;
                down = BORDER_ORC_DOWN;
                left = BORDER_ORC_LEFT;
                right = BORDER_ORC_RIGHT;
            }
            else if (variation == 3) {
                down_right = BORDER_ELF_DOWN_RIGHT;
                down_left = BORDER_ELF_DOWN_LEFT;
                up_right = BORDER_ELF_UP_RIGHT;
                up_left = BORDER_ELF_UP_LEFT;
                up = BORDER_ELF_UP;
                down = BORDER_ELF_DOWN;
                left = BORDER_ELF_LEFT;
                right = BORDER_ELF_RIGHT;
            }
            else if (variation == 4) {
                down_right = BORDER_UNDEAD_DOWN_RIGHT;
                down_left = BORDER_UNDEAD_DOWN_LEFT;
                up_right = BORDER_UNDEAD_UP_RIGHT;
                up_left = BORDER_UNDEAD_UP_LEFT;
                up = BORDER_UNDEAD_UP;
                down = BORDER_UNDEAD_DOWN;
                left = BORDER_UNDEAD_LEFT;
                right = BORDER_UNDEAD_RIGHT;
            }

            if (lenght == 1 && width == 1) {
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_left, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_right, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_left, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_right, true_x, true_y, 0., 0.65, 0);

            }
            else if (lenght == 1 && width > 1) {
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_left, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_right, true_x, true_y, 0., 0.65, 0);
                while(width > 1) {
                    cell_y = cell_y - 1;
                    true_y = (Left_Y + cell_y * 64) + 32.;
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(left, true_x, true_y, 0., 0.65, 0);
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(right, true_x, true_y, 0., 0.65, 0);
                    width = width - 1;
                }
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_left, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_right, true_x, true_y, 0., 0.65, 0);
            }
            else if (lenght > 1 && width == 1) {
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_left, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_left, true_x, true_y, 0., 0.65, 0);
                while(lenght > 1) {
                    cell_x = cell_x + 1;
                    true_x = (Left_X + cell_x * 64) + 32.;
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(up, true_x, true_y, 0., 0.65, 0);
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(down, true_x, true_y, 0., 0.65, 0);
                    lenght = lenght - 1;
                }
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_right, true_x, true_y, 0., 0.65, 0);
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_right, true_x, true_y, 0., 0.65, 0);
            }
            else if (lenght > 1 && width > 1) {
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_left, true_x, true_y, 0., 0.65, 0);
                // + velocity in right
                l = lenght;
                c_x = cell_x;
                while(l > 1) {
                    c_x = c_x + 1;
                    true_x = (Left_X + c_x * 64) + 32.;
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(up, true_x, true_y, 0., 0.65, 0);
                    l = l - 1;
                }
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(up_right, true_x, true_y, 0., 0.65, 0);
                //========================================================================
                // + velocity in down
                w = width; 
                c_y = cell_y;
                while(w > 1) {
                    c_y = c_y - 1;
                    true_y = (Left_Y + c_y * 64) + 32.
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(right, true_x, true_y, 0., 0.65, 0);
                    w = w - 1;
                }
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_right, true_x, true_y, 0., 0.65, 0);
                //========================================================================
                // - velocity in down
                true_x = (Left_X + cell_x * 64) + 32.;
                w = width;
                c_y = cell_y;
                while(w > 1) {
                    c_y = c_y - 1;
                    true_y = (Left_Y + c_y * 64) + 32.;
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(left, true_x, true_y, 0., 0.65, 0);
                    w = w - 1;
                }
                DestrCount = DestrCount + 1;
                MiscDestructables[DestrCount] = CreateDestructable(down_left, true_x, true_y, 0., 0.65, 0);
                //========================================================================
                // - velocity in right
                true_x = (Left_X + cell_x * 64) + 32.;
                l = lenght;
                c_x = cell_x;
                while(l > 1) {
                    c_x = c_x + 1;
                    true_x = (Left_X + c_x * 64) + 32.;
                    DestrCount = DestrCount + 1;
                    MiscDestructables[DestrCount] = CreateDestructable(down, true_x, true_y, 0., 0.65, 0);
                    l = l - 1;
                }
            }
            //CreateDestructable('B000', (start_x + cell_x * 64) + 32.,(start_y + cell_y * 64) + 32., 0., 1.1, 0);
        }

        public function BuildInterface(integer variation) {
            integer background, down_right, down_left, up_right, up_left, up, down, left, right;
            integer c = 22;
            real x, y, a, dist = 64.;
            if (IsShowed) {
                return; 
            }
            IsShowed = true; 

            SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 270., 0.);
            SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 1645., 0.);
            TimerStart(CameraLockTimer, 0.01, true, function CameraProcess);
            
            if (variation == 1) {
                background = BACKGROUND_HUMAN_ID;
                down_right = BORDER_HUMAN_DOWN_RIGHT;
                down_left = BORDER_HUMAN_DOWN_LEFT;
                up_right = BORDER_HUMAN_UP_RIGHT;
                up_left = BORDER_HUMAN_UP_LEFT;
                up = BORDER_HUMAN_UP;
                down = BORDER_HUMAN_DOWN;
                left = BORDER_HUMAN_LEFT;
                right = BORDER_HUMAN_RIGHT;
            } else
            if (variation == 2) {
                background = BACKGROUND_ORC_ID;
                down_right = BORDER_ORC_DOWN_RIGHT;
                down_left = BORDER_ORC_DOWN_LEFT;
                up_right = BORDER_ORC_UP_RIGHT;
                up_left = BORDER_ORC_UP_LEFT;
                up = BORDER_ORC_UP;
                down = BORDER_ORC_DOWN;
                left = BORDER_ORC_LEFT;
                right = BORDER_ORC_RIGHT;
            } else
            if (variation == 3) {
                background = BACKGROUND_ELF_ID;
                down_right = BORDER_ELF_DOWN_RIGHT;
                down_left = BORDER_ELF_DOWN_LEFT;
                up_right = BORDER_ELF_UP_RIGHT;
                up_left = BORDER_ELF_UP_LEFT;
                up = BORDER_ELF_UP;
                down = BORDER_ELF_DOWN;
                left = BORDER_ELF_LEFT;
                right = BORDER_ELF_RIGHT;
            } else
            if (variation == 4) {
                background = BACKGROUND_UNDEAD_ID;
                down_right = BORDER_UNDEAD_DOWN_RIGHT;
                down_left = BORDER_UNDEAD_DOWN_LEFT;
                up_right = BORDER_UNDEAD_UP_RIGHT;
                up_left = BORDER_UNDEAD_UP_LEFT;
                up = BORDER_UNDEAD_UP;
                down = BORDER_UNDEAD_DOWN;
                left = BORDER_UNDEAD_LEFT;
                right = BORDER_UNDEAD_RIGHT;
            }
            
            BASE = CreateDestructable(BASE_ID, BASE_X, BASE_Y, 90., 6.5, 0);
            BACKGROUND = CreateDestructable(background, BASE_X + 32., BASE_Y, 0., 2., 0);
            FogModifierStart(Visibility);
            // UP
            // x = BASE_X + Rx(746.374, 149.036);
            // y = BASE_Y + Ry(746.374, 149.036);
            x = BASE_X + Rx(801.921, 151.390); 
            y = BASE_Y + Ry(801.921, 151.390);
            while(c != 0) {
                UP[c] = CreateDestructable(up, x + Rx(dist, 0.), y + Ry(dist, 0.), 0., 0.65, 0);
                dist = dist + 64.;
                c = c - 1;
            }
            // DOWN
            // x = BASE_X + Rx(715.547, -153.435);
            // y = BASE_Y + Ry(715.547, -153.435);
            x = BASE_X + Rx(773.327, - 155.556);
            y = BASE_Y + Ry(773.327, - 155.556);
            c = 22;
            dist = 64.;
            while(c != 0) {
                DOWN[c] = CreateDestructable(down, x + Rx(dist, 0.), y + Ry(dist, 0.), 0., 0.65, 0);
                dist = dist + 64.;
                c = c - 1;
            }
            // RIGHT
            x = BASE_X + Rx(858.656, 26.565);
            y = BASE_Y + Ry(858.656, 26.565);
            c = 10;
            dist = 64.;
            while(c != 0) {
                RIGHT[c] = CreateDestructable(right, x + Rx(dist, - 90.), y + Ry(dist, - 90.), 0., 0.65, 0);
                dist += 64.;
                c = c - 1;
            }
            // LEFT
            x = BASE_X + Rx(801.921, 151.390);
            y = BASE_Y + Ry(801.921, 151.390);
            c = 10; 
            dist = 64.;
            while(c != 0) {
                LEFT[c] = CreateDestructable(left, x + Rx(dist, - 90.), y + Ry(dist, - 90.), 0., 0.65, 0)
                dist += 64.
                c = c - 1;
            }
            UP_LEFT = CreateDestructable(up_left, BASE_X + Rx(801.921, 151.390), BASE_Y + Ry(801.921, 151.390), 0., 0.65, 0);
            UP_RIGHT = CreateDestructable(up_right, BASE_X + Rx(858.656, 26.565), BASE_Y + Ry(858.656, 26.565), 0., 0.65, 0);
            DOWN_LEFT = CreateDestructable(down_left, BASE_X + Rx(773.327, - 155.556), BASE_Y + Ry(773.327, - 155.556), 0., 0.65, 0);
            DOWN_RIGHT = CreateDestructable(down_right, BASE_X + Rx(832.015, - 22.620), BASE_Y + Ry(832.015, - 22.620), 0., 0.65, 0);
        }

        function InitBasePos() {
            if (GetDestructableTypeId(GetEnumDestructable()) == BASE_ID) {
                BASE_X = GetDestructableX(GetEnumDestructable());
                BASE_Y = GetDestructableY(GetEnumDestructable());
                RemoveDestructable(GetEnumDestructable());
            }
        }

        function DelayedInit() {
            Left_X = BASE_X + Rx(773.327, - 155.556); Left_Y = BASE_Y + Ry(773.327, - 155.556)
            ClickSound = CreateSound("Sound\\Interface\\MouseClick1.wav", false, false, false , 10, 10, "CombatSoundsEAX")
            ActivateSound = CreateSound("Sound\\Interface\\AutoCastButtonClick1.wav", false, false, false, 10, 10, "CombatSoundsEAX")
            AreaRect = Rect(BASE_X - 768., BASE_Y - 512., BASE_X + 922., BASE_Y + 512.)
            Visibility = CreateFogModifierRect(Player(0), FOG_OF_WAR_VISIBLE, AreaRect, true, false)
            FogModifierStop(Visibility)
            DT(GetExpiredTimer())
        }

        function onInit() {
            EnumDestructablesInRect(bj_mapInitialPlayableArea, null, function InitBasePos)
            TimerStart(CT, 0.1, false, function DelayedInit)
        }

    }

//! endzinc